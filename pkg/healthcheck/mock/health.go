// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/healthcheck/health.go

// Package mock_healthcheck is a generated GoMock package.
package mock_healthcheck

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	healthcheck "github.com/razorpay/catalyst/pkg/healthcheck"
)

// MockHealthCheck is a mock of HealthCheck interface.
type MockHealthCheck struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckMockRecorder
}

// MockHealthCheckMockRecorder is the mock recorder for MockHealthCheck.
type MockHealthCheckMockRecorder struct {
	mock *MockHealthCheck
}

// NewMockHealthCheck creates a new mock instance.
func NewMockHealthCheck(ctrl *gomock.Controller) *MockHealthCheck {
	mock := &MockHealthCheck{ctrl: ctrl}
	mock.recorder = &MockHealthCheckMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheck) EXPECT() *MockHealthCheckMockRecorder {
	return m.recorder
}

// AddConnectionCheck mocks base method.
func (m *MockHealthCheck) AddConnectionCheck(name string, check healthcheck.Check) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddConnectionCheck", name, check)
}

// AddConnectionCheck indicates an expected call of AddConnectionCheck.
func (mr *MockHealthCheckMockRecorder) AddConnectionCheck(name, check interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddConnectionCheck", reflect.TypeOf((*MockHealthCheck)(nil).AddConnectionCheck), name, check)
}

// AddLivelinessCheck mocks base method.
func (m *MockHealthCheck) AddLivelinessCheck(name string, check healthcheck.Check) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddLivelinessCheck", name, check)
}

// AddLivelinessCheck indicates an expected call of AddLivelinessCheck.
func (mr *MockHealthCheckMockRecorder) AddLivelinessCheck(name, check interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLivelinessCheck", reflect.TypeOf((*MockHealthCheck)(nil).AddLivelinessCheck), name, check)
}

// AddReadinessCheck mocks base method.
func (m *MockHealthCheck) AddReadinessCheck(name string, check healthcheck.Check) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddReadinessCheck", name, check)
}

// AddReadinessCheck indicates an expected call of AddReadinessCheck.
func (mr *MockHealthCheckMockRecorder) AddReadinessCheck(name, check interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReadinessCheck", reflect.TypeOf((*MockHealthCheck)(nil).AddReadinessCheck), name, check)
}

// Connect mocks base method.
func (m *MockHealthCheck) Connect(ctx context.Context) healthcheck.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(healthcheck.Response)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockHealthCheckMockRecorder) Connect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockHealthCheck)(nil).Connect), ctx)
}

// Live mocks base method.
func (m *MockHealthCheck) Live(ctx context.Context) healthcheck.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Live", ctx)
	ret0, _ := ret[0].(healthcheck.Response)
	return ret0
}

// Live indicates an expected call of Live.
func (mr *MockHealthCheckMockRecorder) Live(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Live", reflect.TypeOf((*MockHealthCheck)(nil).Live), ctx)
}

// Ready mocks base method.
func (m *MockHealthCheck) Ready(ctx context.Context) healthcheck.Response {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready", ctx)
	ret0, _ := ret[0].(healthcheck.Response)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockHealthCheckMockRecorder) Ready(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockHealthCheck)(nil).Ready), ctx)
}
